import { ChartOptionalRootSelector } from "../../utils/selectors.js";
import { UseChartInteractionSignature } from "./useChartInteraction.types.js";
export declare const selectorChartsInteractionIsInitialized: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionItem: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null;
  memoizedResultFunc: ((resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null;
  dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionPointer: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => import("./useChartInteraction.types").Coordinate | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => import("./useChartInteraction.types").Coordinate | null;
  memoizedResultFunc: ((resultFuncArgs_0: {
    item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
    pointer: import("./useChartInteraction.types").Coordinate | null;
  } | undefined) => import("./useChartInteraction.types").Coordinate | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./useChartInteraction.types").Coordinate | null;
  dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionPointerX: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("./useChartInteraction.types").Coordinate | null) => number | null;
  memoizedResultFunc: ((resultFuncArgs_0: import("./useChartInteraction.types").Coordinate | null) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number | null;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("./useChartInteraction.types").Coordinate | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("./useChartInteraction.types").Coordinate | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("./useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./useChartInteraction.types").Coordinate | null;
    dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionPointerY: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("./useChartInteraction.types").Coordinate | null) => number | null;
  memoizedResultFunc: ((resultFuncArgs_0: import("./useChartInteraction.types").Coordinate | null) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number | null;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("./useChartInteraction.types").Coordinate | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("./useChartInteraction.types").Coordinate | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("./useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./useChartInteraction.types").Coordinate | null;
    dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionItemIsDefined: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
      pointer: import("./useChartInteraction.types").Coordinate | null;
    } | undefined) => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../..").ScatterItemIdentifier | import("../../../..").LineItemIdentifier | import("../../../..").BarItemIdentifier | import("../../../..").PieItemIdentifier | import("../../../..").RadarItemIdentifier | null;
    dependencies: [ChartOptionalRootSelector<UseChartInteractionSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};