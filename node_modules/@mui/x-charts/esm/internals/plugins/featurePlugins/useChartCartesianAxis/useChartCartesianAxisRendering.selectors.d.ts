import { UseChartCartesianAxisSignature } from "./useChartCartesianAxis.types.js";
import { ChartState } from "../../models/chart.js";
import { ZoomData } from "./zoom.types.js";
import { AxisId } from "../../../../models/axis.js";
export declare const createZoomMap: (zoom: readonly ZoomData[]) => Map<AxisId, ZoomData>;
/**
 * Following selectors are not exported because they exist in the MIT chart only to ba able to reuse the Zoom state from the pro.
 */
export declare const selectorChartZoomIsInteracting: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => boolean | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => boolean | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => boolean | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean | undefined;
  dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartZoomOptionsLookup: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => {
  [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  };
  memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  };
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
/**
 * The only interesting selectors that merge axis data and zoom if provided.
 */
export declare const selectorChartXAxis: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & Partial<{}>) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsXAxisProps>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types").GetZoomAxisFilters | undefined) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsXAxisProps>;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types").GetZoomAxisFilters | undefined) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsXAxisProps>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./computeAxisValue").ComputeResult<import("../../..").ChartsXAxisProps>;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState>) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => Map<AxisId, ZoomData> | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<AxisId, ZoomData> | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    };
    memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<{}>) => import("./zoom.types").GetZoomAxisFilters | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_3: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => import("./zoom.types").GetZoomAxisFilters | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_3: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => import("./zoom.types").GetZoomAxisFilters | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./zoom.types").GetZoomAxisFilters | undefined;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartYAxis: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & Partial<{}>) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsYAxisProps>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types").GetZoomAxisFilters | undefined) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsYAxisProps>;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types").GetZoomAxisFilters | undefined) => import("./computeAxisValue").ComputeResult<import("../../..").ChartsYAxisProps>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./computeAxisValue").ComputeResult<import("../../..").ChartsYAxisProps>;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState>) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => Map<AxisId, ZoomData> | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<AxisId, ZoomData> | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => {
    [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    };
    memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
          y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<{}>) => import("./zoom.types").GetZoomAxisFilters | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_3: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => import("./zoom.types").GetZoomAxisFilters | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined, resultFuncArgs_3: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => import("./zoom.types").GetZoomAxisFilters | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./zoom.types").GetZoomAxisFilters | undefined;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
        y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};