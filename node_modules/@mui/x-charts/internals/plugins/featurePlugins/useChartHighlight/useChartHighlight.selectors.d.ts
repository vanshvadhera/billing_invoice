import { SeriesId } from "../../../../models/seriesType/common.js";
import { UseChartSeriesSignature } from "../../corePlugins/useChartSeries/useChartSeries.types.js";
import { ChartRootSelector } from "../../utils/selectors.js";
import { HighlightItemData, UseChartHighlightSignature } from "./useChartHighlight.types.js";
import { HighlightScope } from "./highlightConfig.types.js";
export declare const selectorChartsHighlightScopePerSeriesId: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
  memoizedResultFunc: ((resultFuncArgs_0: {
    processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
  dependencies: [ChartRootSelector<UseChartSeriesSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsHighlightedItem: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => HighlightItemData | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    item: HighlightItemData | null;
  }) => HighlightItemData | null;
  memoizedResultFunc: ((resultFuncArgs_0: {
    item: HighlightItemData | null;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => HighlightItemData | null;
  dependencies: [ChartRootSelector<UseChartHighlightSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsHighlightScope: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & import("./useChartHighlight.types").UseChartHighlightState) => Partial<HighlightScope> | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null;
  memoizedResultFunc: ((resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => Partial<HighlightScope> | null;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
    dependencies: [ChartRootSelector<UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => HighlightItemData | null;
    dependencies: [ChartRootSelector<UseChartHighlightSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsIsHighlightedCallback: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & import("./useChartHighlight.types").UseChartHighlightState) => (item: HighlightItemData | null) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null) => (item: HighlightItemData | null) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null) => (item: HighlightItemData | null) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => (item: HighlightItemData | null) => boolean;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & import("./useChartHighlight.types").UseChartHighlightState) => Partial<HighlightScope> | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null;
    memoizedResultFunc: ((resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Partial<HighlightScope> | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
      dependencies: [ChartRootSelector<UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => HighlightItemData | null;
      dependencies: [ChartRootSelector<UseChartHighlightSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => HighlightItemData | null;
    dependencies: [ChartRootSelector<UseChartHighlightSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsIsFadedCallback: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & import("./useChartHighlight.types").UseChartHighlightState) => (item: HighlightItemData | null) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null) => (item: HighlightItemData | null) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null) => (item: HighlightItemData | null) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => (item: HighlightItemData | null) => boolean;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & import("./useChartHighlight.types").UseChartHighlightState) => Partial<HighlightScope> | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null;
    memoizedResultFunc: ((resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Partial<HighlightScope> | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
      dependencies: [ChartRootSelector<UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => HighlightItemData | null;
      dependencies: [ChartRootSelector<UseChartHighlightSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => HighlightItemData | null;
    dependencies: [ChartRootSelector<UseChartHighlightSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsIsHighlighted: ((state: any, item: HighlightItemData | null) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null, resultFuncArgs_2: HighlightItemData | null) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null, resultFuncArgs_2: HighlightItemData | null) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & import("./useChartHighlight.types").UseChartHighlightState) => Partial<HighlightScope> | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null;
    memoizedResultFunc: ((resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Partial<HighlightScope> | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
      dependencies: [ChartRootSelector<UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => HighlightItemData | null;
      dependencies: [ChartRootSelector<UseChartHighlightSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => HighlightItemData | null;
    dependencies: [ChartRootSelector<UseChartHighlightSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, (_: any, item: HighlightItemData | null) => HighlightItemData | null];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsIsFaded: ((state: any, item: HighlightItemData | null) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null, resultFuncArgs_2: HighlightItemData | null) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: Partial<HighlightScope> | null, resultFuncArgs_1: HighlightItemData | null, resultFuncArgs_2: HighlightItemData | null) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & import("./useChartHighlight.types").UseChartHighlightState) => Partial<HighlightScope> | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null;
    memoizedResultFunc: ((resultFuncArgs_0: Map<SeriesId, Partial<HighlightScope> | undefined>, resultFuncArgs_1: HighlightItemData | null) => Partial<HighlightScope> | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Partial<HighlightScope> | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => Map<SeriesId, Partial<HighlightScope> | undefined>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Map<SeriesId, Partial<HighlightScope> | undefined>;
      dependencies: [ChartRootSelector<UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: HighlightItemData | null;
      }) => HighlightItemData | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => HighlightItemData | null;
      dependencies: [ChartRootSelector<UseChartHighlightSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartHighlight.types").UseChartHighlightState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => HighlightItemData | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null;
    memoizedResultFunc: ((resultFuncArgs_0: {
      item: HighlightItemData | null;
    }) => HighlightItemData | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => HighlightItemData | null;
    dependencies: [ChartRootSelector<UseChartHighlightSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, (_: any, item: HighlightItemData | null) => HighlightItemData | null];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};