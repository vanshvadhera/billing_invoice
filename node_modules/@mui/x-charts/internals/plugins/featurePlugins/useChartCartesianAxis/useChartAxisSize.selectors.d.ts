export declare const selectorChartLeftAxisSize: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    dependencies: [(state: import("../../models").ChartState<[], [import("./useChartCartesianAxis.types").UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartRightAxisSize: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
    dependencies: [(state: import("../../models").ChartState<[], [import("./useChartCartesianAxis.types").UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartTopAxisSize: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    dependencies: [(state: import("../../models").ChartState<[], [import("./useChartCartesianAxis.types").UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartBottomAxisSize: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => number) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types").UseChartCartesianAxisState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
    dependencies: [(state: import("../../models").ChartState<[], [import("./useChartCartesianAxis.types").UseChartCartesianAxisSignature]>) => {
      x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
      y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};