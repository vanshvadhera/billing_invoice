import { ChartRootSelector } from "../../utils/selectors.js";
import { UseChartVoronoiSignature } from "./useChartVoronoi.types.js";
export declare const selectorChartsVoronoiIsVoronoiEnabled: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types").UseChartAnimationState & import("./useChartVoronoi.types").UseChartVoronoiState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => boolean | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    isVoronoiEnabled?: boolean;
  }) => boolean | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    isVoronoiEnabled?: boolean;
  }) => boolean | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean | undefined;
  dependencies: [ChartRootSelector<UseChartVoronoiSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};