import { ChartRootSelector } from "../../utils/selectors.js";
import type { UseChartAnimationSignature } from './useChartAnimation.types';
export declare const selectorChartSkipAnimation: ((state: import("../useChartId/useChartId.types").UseChartIdState & import("../useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => boolean) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    skip: boolean;
    skipAnimationRequests: number;
  }) => boolean;
  memoizedResultFunc: ((resultFuncArgs_0: {
    skip: boolean;
    skipAnimationRequests: number;
  }) => boolean) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean;
  dependencies: [ChartRootSelector<UseChartAnimationSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};