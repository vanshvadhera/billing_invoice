import { ChartRootSelector } from "../../utils/selectors.js";
import { UseChartSeriesSignature } from "./useChartSeries.types.js";
export declare const selectorChartSeriesState: ChartRootSelector<UseChartSeriesSignature>;
export declare const selectorChartSeriesProcessed: ((state: import("../useChartId/useChartId.types").UseChartIdState & import("../useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("./useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    processedSeries: import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
  memoizedResultFunc: ((resultFuncArgs_0: {
    processedSeries: import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
  dependencies: [ChartRootSelector<UseChartSeriesSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartSeriesConfig: ((state: import("../useChartId/useChartId.types").UseChartIdState & import("../useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("./useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models").ChartStateCacheKey;
}) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    processedSeries: import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  memoizedResultFunc: ((resultFuncArgs_0: {
    processedSeries: import("./useChartSeries.types").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
    seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
  dependencies: [ChartRootSelector<UseChartSeriesSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};