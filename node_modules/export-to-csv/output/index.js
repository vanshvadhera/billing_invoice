var q;(function(x){x["csv"]="text/csv";x["tsv"]="text/tab-separated-values";x["plain"]="text/plain"})(q||(q={}));var X=(W)=>W,z=(W)=>W,Z=X,_=X,Y=X,N=X,V=X;var h={fieldSeparator:",",decimalSeparator:".",quoteStrings:!0,quoteCharacter:'"',showTitle:!1,title:"My Generated Report",filename:"generated",showColumnHeaders:!0,useTextFile:!1,fileExtension:"csv",mediaType:q.csv,useBom:!0,columnHeaders:[],useKeysAsHeaders:!1,boolDisplay:{true:"TRUE",false:"FALSE"},replaceUndefinedWith:""},F="\r\n",R="\uFEFF",G=(W)=>Object.assign({},h,W);class K extends Error{constructor(W){super(W);this.name="CsvGenerationError"}}class B extends Error{constructor(W){super(W);this.name="EmptyHeadersError"}}class L extends Error{constructor(W){super(W);this.name="CsvDownloadEnvironmentError"}}class P extends Error{constructor(W){super(W);this.name="UnsupportedDataFormatError"}}var s=function(W,$){if($=='"'&&W.indexOf('"')>-1)return W.replace(/"/g,'""');return W},w=(W)=>typeof W==="object"?N(W.key):N(W),y=(W)=>typeof W==="object"?V(W.displayLabel):V(W),T=(W,...$)=>$.reduce((j,x)=>x(j),W),E=(W)=>($)=>W.useBom?_(z($)+R):$,M=(W)=>($)=>W.showTitle?S(_(z($)+W.title))(Y("")):$,S=(W)=>($)=>_(z(W)+z($)+F),O=(W)=>($,j)=>l(W)(Y(z($)+z(j))),l=(W)=>($)=>X(z($)+W.fieldSeparator),b=(W,$)=>(j)=>{if(!W.showColumnHeaders)return j;if($.length<1)throw new B("Option to show headers but none supplied. Make sure there are keys in your collection or that you've supplied headers through the config options.");let x=Y("");for(let A=0;A<$.length;A++){const J=y($[A]);x=O(W)(x,v(W,z(J)))}return x=Y(z(x).slice(0,-1)),S(j)(x)},C=(W,$,j)=>(x)=>{let A=x;for(var J=0;J<j.length;J++){let I=Y("");for(let U=0;U<$.length;U++){const H=w($[U]),D=j[J][z(H)];I=O(W)(I,v(W,D))}I=Y(z(I).slice(0,-1)),A=S(A)(I)}return A},k=z,m=(W)=>+W===W&&(!isFinite(W)||Boolean(W%1)),p=(W,$)=>{if(m($)){if(W.decimalSeparator==="locale")return Z($.toLocaleString());if(W.decimalSeparator)return Z($.toString().replace(".",W.decimalSeparator))}return Z($.toString())},Q=(W,$)=>{let j=$;if(W.quoteStrings||W.fieldSeparator&&$.indexOf(W.fieldSeparator)>-1||W.quoteCharacter&&$.indexOf(W.quoteCharacter)>-1||$.indexOf("\n")>-1||$.indexOf("\r")>-1)j=W.quoteCharacter+s($,W.quoteCharacter)+W.quoteCharacter;return Z(j)},g=(W,$)=>{const j=$?"true":"false";return Z(W.boolDisplay[j])},r=(W,$)=>{if(typeof $==="undefined"&&W.replaceUndefinedWith!==void 0)return Q(W,W.replaceUndefinedWith+"");if($===null)return Q(W,"null");return Q(W,"")},v=(W,$)=>{if(typeof $==="number")return p(W,$);if(typeof $==="string")return Q(W,$);if(typeof $==="boolean"&&W.boolDisplay)return g(W,$);if($===null||typeof $==="undefined")return r(W,$);throw new P(`
    typeof ${typeof $} isn't supported. Only number, string, boolean, null and undefined are supported.
    Please convert the data in your object to one of those before generating the CSV.
    `)};var BW=(W)=>($)=>{const j=G(W),x=j.useKeysAsHeaders?Object.keys($[0]):j.columnHeaders;let A=T(_(""),E(j),M(j),b(j,x),C(j,x,$));if(z(A).length<1)throw new K("Output is empty. Is your data formatted correctly?");return A},f=(W)=>($)=>{const j=G(W),x=z($),A=j.useTextFile?"text/plain":j.mediaType;return new Blob([x],{type:`${A};charset=utf8;`})},LW=(W)=>($)=>{if(!window)throw new L("Downloading only supported in a browser environment.");const j=f(W)($),x=G(W),A=x.useTextFile?"txt":x.fileExtension,J=`${x.filename}.${A}`,I=document.createElement("a");I.download=J,I.href=URL.createObjectURL(j),I.setAttribute("visibility","hidden"),document.body.appendChild(I),I.click(),document.body.removeChild(I)};export{G as mkConfig,BW as generateCsv,LW as download,k as asString,f as asBlob,q as MediaType};
